import torch
import torch.nn as nn
import torch.nn.functional as F

class ResidualBlock(nn.Module):
    def __init__(self, in_channels, out_channels):
        super().__init__()
        self.conv1 = nn.Conv2d(in_channels, out_channels, 3, padding=1)
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.relu = nn.ReLU(inplace=True)

        self.conv2 = nn.Conv2d(out_channels, out_channels, 3, padding=1)
        self.bn2 = nn.BatchNorm2d(out_channels)

        self.residual = nn.Conv2d(in_channels, out_channels, 1) if in_channels != out_channels else nn.Identity()

    def forward(self, x):
        identity = self.residual(x)
        out = self.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        out += identity
        return self.relu(out)

class SEBlock(nn.Module):
    def __init__(self, in_channels, reduction=16):
        super().__init__()
        self.pool = nn.AdaptiveAvgPool2d(1)
        self.fc = nn.Sequential(
            nn.Linear(in_channels, in_channels // reduction),
            nn.ReLU(inplace=True),
            nn.Linear(in_channels // reduction, in_channels),
            nn.Sigmoid()
        )

    def forward(self, x):
        b, c, _, _ = x.size()
        y = self.pool(x).view(b, c)
        y = self.fc(y).view(b, c, 1, 1)
        return x * y

class ASPP(nn.Module):
    def __init__(self, in_channels, out_channels):
        super().__init__()
        self.conv1 = nn.Conv2d(in_channels, out_channels, 1)
        self.conv6 = nn.Conv2d(in_channels, out_channels, 3, padding=6, dilation=6)
        self.conv12 = nn.Conv2d(in_channels, out_channels, 3, padding=12, dilation=12)
        self.conv18 = nn.Conv2d(in_channels, out_channels, 3, padding=18, dilation=18)
        self.project = nn.Conv2d(out_channels * 4, out_channels, 1)

    def forward(self, x):
        x1 = self.conv1(x)
        x2 = self.conv6(x)
        x3 = self.conv12(x)
        x4 = self.conv18(x)
        x_cat = torch.cat([x1, x2, x3, x4], dim=1)
        return self.project(x_cat)

class DecoderBlock(nn.Module):
    def __init__(self, in_channels, out_channels):
        super().__init__()
        self.up = nn.ConvTranspose2d(in_channels, out_channels, kernel_size=2, stride=2)
        self.resblock = ResidualBlock(in_channels, out_channels)

    def forward(self, x, skip):
        x = self.up(x)
        x = torch.cat([x, skip], dim=1)
        return self.resblock(x)


class ResUNetPP(nn.Module):
    def __init__(self, num_classes=1):
        super().__init__()
        filters = [64, 128, 256, 512]

        self.inconv = ResidualBlock(3, filters[0])

        self.enc1 = ResidualBlock(filters[0], filters[1])
        self.pool1 = nn.MaxPool2d(2)

        self.enc2 = ResidualBlock(filters[1], filters[2])
        self.pool2 = nn.MaxPool2d(2)

        self.enc3 = ResidualBlock(filters[2], filters[3])
        self.pool3 = nn.MaxPool2d(2)

        self.bridge = ASPP(filters[3], filters[3])

        self.se1 = SEBlock(filters[1])
        self.se2 = SEBlock(filters[2])
        self.se3 = SEBlock(filters[3])

        self.dec3 = DecoderBlock(filters[3], filters[2])
        self.dec2 = DecoderBlock(filters[2], filters[1])
        self.dec1 = DecoderBlock(filters[1], filters[0])

        self.outconv = nn.Conv2d(filters[0], num_classes, kernel_size=1)

    def forward(self, x):
        x1 = self.inconv(x)
        x2 = self.enc1(self.pool1(x1)); x2 = self.se1(x2)
        x3 = self.enc2(self.pool2(x2)); x3 = self.se2(x3)
        x4 = self.enc3(self.pool3(x3)); x4 = self.se3(x4)

        x_bridge = self.bridge(x4)

        d3 = self.dec3(x_bridge, x3)
        d2 = self.dec2(d3, x2)
        d1 = self.dec1(d2, x1)

        out = self.outconv(d1)
        return torch.sigmoid(out)

